{"version":3,"file":"static/js/458.ddcd8dab.chunk.js","mappings":"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","sources":["pages/sign-up.js","services/firebase.js"],"sourcesContent":["import React, { useState, useContext, useEffect } from 'react';\nimport { Link, useHistory } from 'react-router-dom';\nimport FirebaseContext from '../context/firebase';\nimport * as ROUTES from '../constants/routes';\nimport { doesUsernameExist } from '../services/firebase';\n\nconst SignUp = () => {\n  const history = useHistory();\n  const { firebase } = useContext(FirebaseContext);\n\n  const [emailAddress, setEmailAddress] = useState('');\n  const [password, setPassword] = useState('');\n  const [username, setUserName] = useState('');\n  const [fullName, setFullName] = useState('');\n\n  const [error, setError] = useState('');\n  const isInValid = emailAddress === '' || password === '';\n\n  const handleSignUp = async (event) => {\n    event.preventDefault();\n\n    const usernameExists = await doesUsernameExist(username);\n    console.log(usernameExists);\n    if (!usernameExists.length) {\n      try {\n        const createdUserResult = await firebase\n          .auth()\n          .createUserWithEmailAndPassword(emailAddress, password);\n\n        // authentication -> emailAddress & password & username\n        await createdUserResult.user.updateProfile({\n          displayName: username,\n        });\n\n        // firebase user collection (create a document)\n        await firebase.firestore().collection('users').add({\n          userId: createdUserResult.user.uid,\n          username: username.toLowerCase(),\n          fullName,\n          emailAddress: emailAddress.toLowerCase(),\n          following: [],\n          followers: [],\n          dateCreated: Date.now(),\n        });\n\n        history.push(ROUTES.DASHBOARD);\n      } catch (error) {\n        setFullName('');\n        setEmailAddress('');\n        setPassword('');\n        setError(error.message);\n      }\n    } else {\n      setUserName('');\n      setError('That username is already taken, please try another.');\n    }\n    // try {\n\n    // } catch (error) {\n\n    // }\n  };\n\n  useEffect(() => {\n    document.title = 'Sign Up - Instagram';\n  }, []);\n\n  return (\n    <div className=\"container flex mx-auto max-w-screen-md items-center h-screen\">\n      <div className=\"flex w-3/5\">\n        <img\n          src=\"/images/iphone-with-profile.jpg\"\n          alt=\"iPhone with Instagram app\"\n        />\n      </div>\n      <div className=\"flex flex-col w-2/5\">\n        <div className=\"flex flex-col items-center bg-white p-4 border border-gray-primary mb-4 rounded\">\n          <h1 className=\"flex justify-center w-full\">\n            <img\n              src=\"images/logo.png\"\n              alt=\"Instagram\"\n              className=\"mt-2 w-6/12 mb-4\"\n            />\n          </h1>\n\n          {error && <p className=\"mb-4 text-xs text-red-primary\">{error}</p>}\n\n          <form onSubmit={handleSignUp} method=\"POST\">\n            <input\n              aria-label=\"Enter your username\"\n              type=\"text\"\n              placeholder=\"Username\"\n              className=\"text-sm text-gray-base w-full mr-3 py-5 px-4 h-2 border border-gray-primary rounded mb-2\"\n              onChange={({ target }) => setUserName(target.value)}\n              value={username}\n            />\n            <input\n              aria-label=\"Enter your full name\"\n              type=\"text\"\n              placeholder=\"Full name\"\n              className=\"text-sm text-gray-base w-full mr-3 py-5 px-4 h-2 border border-gray-primary rounded mb-2\"\n              onChange={({ target }) => setFullName(target.value)}\n              value={fullName}\n            />\n            <input\n              aria-label=\"Enter your email address\"\n              type=\"text\"\n              placeholder=\"Email address\"\n              className=\"text-sm text-gray-base w-full mr-3 py-5 px-4 h-2 border border-gray-primary rounded mb-2\"\n              onChange={({ target }) => setEmailAddress(target.value)}\n              value={emailAddress}\n            />\n            <input\n              aria-label=\"Enter your password\"\n              type=\"password\"\n              placeholder=\"Password\"\n              className=\"text-sm text-gray-base w-full mr-3 py-5 px-4 h-2 border border-gray-primary rounded mb-2\"\n              onChange={({ target }) => setPassword(target.value)}\n              value={password}\n            />\n            <button\n              disabled={isInValid}\n              type=\"submit\"\n              className={`bg-blue-medium text-white w-full rounded h-8 font-bold \n            ${isInValid && 'opacity-50'}`}\n            >\n              Sign Up\n            </button>\n          </form>\n        </div>\n        <div className=\"flex justify-center items-center flex-col w-full bg-white p-4 rounded border border-gray-primary\">\n          <p className=\"text-sm\">\n            Have an account?{' '}\n            <Link to={ROUTES.LOGIN} className=\"font-bold text-blue-medium\">\n              Login\n            </Link>\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default SignUp;\n","import { firebase, FieldValue } from '../lib/firebase';\n\nconst doesUsernameExist = async (username) => {\n  const result = await firebase\n    .firestore()\n    .collection('users')\n    .where('username', '==', username)\n    .get();\n\n  return result.docs.map((user) => user.data().length > 0);\n};\n\nconst getUserByUsername = async (username) => {\n  const result = await firebase\n    .firestore()\n    .collection('users')\n    .where('username', '==', username)\n    .get();\n\n  return result.docs.map((item) => ({\n    ...item.data(),\n    docId: item.id,\n  }));\n};\n\n// get user from the firestore where userId === userId (passed from the auth)\nconst getUserByUserId = async (userId) => {\n  const result = await firebase\n    .firestore()\n    .collection('users')\n    .where('userId', '==', userId)\n    .get();\n  const user = result.docs.map((item) => ({\n    ...item.data(),\n    docId: item.id,\n  }));\n\n  return user;\n};\n\nconst getSuggestedProfiles = async (userId, following) => {\n  const result = await firebase.firestore().collection('users').limit(10).get();\n\n  return result.docs\n    .map((user) => ({ ...user.data(), docId: user.id }))\n    .filter(\n      (profile) =>\n        profile.userId !== userId && !following.includes(profile.userId)\n    );\n};\n\nconst updateLoggedInUserFollowing = async (\n  loggedInUserDocId, //currently logged in user document id (jim's profile)\n  profileId, // the user that jim requests to follow\n  isFollowingProfile // true/false (am I currently following this person?)\n) => {\n  return firebase\n    .firestore()\n    .collection('users')\n    .doc(loggedInUserDocId)\n    .update({\n      following: isFollowingProfile\n        ? FieldValue.arrayRemove(profileId)\n        : FieldValue.arrayUnion(profileId),\n    });\n};\n\nconst updateFollowedUserFollowers = async (\n  profileDocId,\n  userId,\n  isFollowingProfile\n) => {\n  return firebase\n    .firestore()\n    .collection('users')\n    .doc(profileDocId)\n    .update({\n      followers: isFollowingProfile\n        ? FieldValue.arrayRemove(userId)\n        : FieldValue.arrayUnion(userId),\n    });\n};\n\nconst getPhotos = async (userId, following) => {\n  const result = await firebase\n    .firestore()\n    .collection('photos')\n    .where('userId', 'in', following)\n    .get();\n\n  const userFollowedPhotos = result.docs.map((photo) => ({\n    ...photo.data(),\n    docId: photo.id,\n  }));\n\n  const photosWithUserDetails = await Promise.all(\n    userFollowedPhotos.map(async (photo) => {\n      let userLikedPhoto = false;\n      if (photo.likes.includes(userId)) {\n        userLikedPhoto = true;\n      }\n\n      const user = await getUserByUserId(photo.userId);\n\n      const { username } = user[0];\n      return { username, ...photo, userLikedPhoto };\n    })\n  );\n\n  return photosWithUserDetails;\n};\n\nconst getUserPhotosByUsername = async (username) => {\n  const [user] = await getUserByUsername(username);\n  const result = await firebase\n    .firestore()\n    .collection('photos')\n    .where('userId', '==', user.userId)\n    .get();\n\n  return result.docs.map((item) => ({\n    ...item.data(),\n    docId: item.id,\n  }));\n};\n\nconst isUserFollowingProfile = async (loggedInUsername, profileUserId) => {\n  const result = await firebase\n    .firestore()\n    .collection('users')\n    .where('username', '==', loggedInUsername)\n    .where('following', 'array-contains', profileUserId)\n    .get();\n\n  const [response = {}] = result.docs.map((item) => ({\n    ...item.data(),\n    docId: item.id,\n  }));\n\n  return response.userId;\n};\n\nconst toggleFollow = async (\n  isFollowingProfile,\n  activeUserDocId,\n  profileDocId,\n  profileUserId,\n  followingUserId\n) => {\n  // 1st param: jim's doc id\n  // 2nd param: raphael's user id\n  // 3rd param: is the user following this profile? e.g. does jim follow raphael? (true/false)\n  await updateLoggedInUserFollowing(\n    activeUserDocId,\n    profileUserId,\n    isFollowingProfile\n  );\n  // 1st param: raphael's doc id\n  // 2nd param: jim's user id\n  // 3rd param: is the user following this profile? e.g. does jim follow raphael? (true/false)\n  await updateFollowedUserFollowers(\n    profileDocId,\n    followingUserId,\n    isFollowingProfile\n  );\n};\n\nexport {\n  doesUsernameExist,\n  getUserByUsername,\n  getUserByUserId,\n  getSuggestedProfiles,\n  updateLoggedInUserFollowing,\n  updateFollowedUserFollowers,\n  getPhotos,\n  getUserPhotosByUsername,\n  isUserFollowingProfile,\n  toggleFollow,\n};\n"],"names":["history","useHistory","firebase","useContext","FirebaseContext","useState","emailAddress","setEmailAddress","password","setPassword","username","setUserName","fullName","setFullName","error","setError","isInValid","handleSignUp","event","preventDefault","doesUsernameExist","usernameExists","console","log","length","auth","createUserWithEmailAndPassword","createdUserResult","user","updateProfile","displayName","firestore","collection","add","userId","uid","toLowerCase","following","followers","dateCreated","Date","now","push","ROUTES","message","useEffect","document","title","className","src","alt","onSubmit","method","type","placeholder","onChange","target","value","disabled","to","where","get","result","docs","map","data","getUserByUsername","item","docId","id","getUserByUserId","getSuggestedProfiles","limit","filter","profile","includes","updateLoggedInUserFollowing","loggedInUserDocId","profileId","isFollowingProfile","doc","update","FieldValue","updateFollowedUserFollowers","profileDocId","getPhotos","userFollowedPhotos","photo","Promise","all","userLikedPhoto","likes","photosWithUserDetails","getUserPhotosByUsername","isUserFollowingProfile","loggedInUsername","profileUserId","response","toggleFollow","activeUserDocId","followingUserId"],"sourceRoot":""}